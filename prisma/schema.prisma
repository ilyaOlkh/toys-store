generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model users {
    id            Int      @id @default(autoincrement())
    first_name    String
    last_name     String
    email         String   @unique
    password_hash String
    created_at    DateTime @default(now())
}

model orders {
    id              Int               @id @default(autoincrement())
    order_id        String            @unique
    user_identifier String
    first_name      String
    last_name       String
    city            String?
    state           String?
    phone           String
    email           String
    payment_method  payment_method
    delivery_method delivery_method
    delivery_address String?
    delivery_cost   delivery_cost_type?
    paid            Boolean          @default(false)
    notes           String?          @db.Text
    created_at      DateTime         @default(now())
    payment_date    DateTime?
    subtotal        Decimal          @db.Decimal(10, 2)
    total           Decimal          @db.Decimal(10, 2)
    status          order_status     @default(pending)
    products        order_products[]
}

model order_products {
    id              Int       @id @default(autoincrement())
    order_id        Int
    product_id      Int
    quantity        Int
    original_price  Decimal   @db.Decimal(10, 2)
    purchase_price  Decimal   @db.Decimal(10, 2)
    product_name    String
    product_sku     String
    subtotal        Decimal?  @db.Decimal(10, 2)
    total           Decimal?  @db.Decimal(10, 2)
    order           orders    @relation(fields: [order_id], references: [id], onDelete: Cascade)
    product         products  @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model products {
    id             Int                      @id @default(autoincrement())
    name           String
    price          Decimal                  @db.Decimal(10, 2)
    discount       Decimal                  @default(0) @db.Decimal(10, 2)
    description    String?                  @db.Text
    stock_quantity Int
    sku_code       String                  @unique
    created_at     DateTime                @default(now())
    images         product_images[]
    types          product_types_relation[]
    tags           product_tags[]
    comments       comments[]
    discounts      discounts[]
    favorites      favorites[]
    cart           cart[]
    order_products order_products[]
}

model types {
    id         Int                      @id @default(autoincrement())
    name       String
    image_blob String?                  @db.Text
    products   product_types_relation[]
}

model product_types_relation {
    product_id Int
    type_id    Int
    product    products @relation(fields: [product_id], references: [id], onDelete: Cascade)
    type       types    @relation(fields: [type_id], references: [id], onDelete: Cascade)

    @@id([product_id, type_id])
}

model tags {
    id       Int            @id @default(autoincrement())
    name     String
    products product_tags[]
}

model product_tags {
    product_id Int
    tag_id     Int
    product    products @relation(fields: [product_id], references: [id], onDelete: Cascade)
    tag        tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade)

    @@id([product_id, tag_id])
}

model product_images {
    id          Int      @id @default(autoincrement())
    product_id  Int
    image_blob  String   @unique
    product     products @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model favorites {
    id              Int      @id @default(autoincrement())
    user_identifier String
    product_id      Int
    product         products @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model cart {
    id              Int      @id @default(autoincrement())
    user_identifier String
    product_id      Int
    quantity        Int
    product         products @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model comments {
    id              Int       @id @default(autoincrement())
    product_id      Int
    user_identifier String
    comment         String    @db.Text
    rating          Float
    created_at      DateTime  @default(now())
    edited_at       DateTime?
    edited_by       String?
    product         products  @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model discounts {
    id         Int      @id @default(autoincrement())
    product_id Int
    new_price  Decimal  @db.Decimal(10, 2)
    start_date DateTime @db.Date
    end_date   DateTime @db.Date
    product    products @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

enum payment_method {
    credit_card
    credit_card_later
    cash
}

enum order_status {
    pending
    processing
    shipped
    delivered
    cancelled
}

enum delivery_method {
    nova_poshta
    ukr_poshta
    pickup
}

enum delivery_cost_type {
    carrier_tariff
    free
}